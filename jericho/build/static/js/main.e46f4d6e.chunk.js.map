{"version":3,"sources":["components/Sound.jsx","components/SoundGroup.jsx","components/Soundboard.jsx","App.js","serviceWorker.js","index.js"],"names":["ipcRenderer","window","require","Sound","Component","constructor","props","super","this","state","name","filepath","fileAddHandler","index","displayName","render","className","onClick","addSound","minimal","icon","iconSize","playSound","intent","args","id","send","on","event","setState","undefined","localeCompare","Audio","play","catch","e","console","error","updateFormData","ev","target","type","Number","value","SoundGroup","propSounds","sounds","binding","isOpen","toggleOpen","length","keepChildrenMounted","Object","keys","filter","sound","map","key","cleanState","soundGroups","SoundBoard","propSoundGroups","log","playSoundGroup","soundboard","addSoundGroup","group","toString","addFileHander","bind","import","export","i","random","Math","round","file","storedData","JSON","stringify","fileInput","groupFile","split","groupId","fileId","groups","groupSounds","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e46f4d6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Icon, Input, Label } from \"@blueprintjs/core\";\r\nconst { ipcRenderer } = window.require('electron');\r\n\r\nclass Sound extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: this.props.name,\r\n            filepath: this.props.filepath,\r\n            fileAddHandler: this.props.fileAddHandler,\r\n            index: this.props.index,\r\n            displayName: \"Sound \" + this.props.index\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"soundHeader\">\r\n            <Button onClick={() => this.addSound()} minimal={true} className=\"editButton\"><Icon icon=\"edit\" iconSize={16} /></Button>\r\n            <Label className=\"soundName\">{this.state.displayName}</Label>\r\n            <Button onClick={() => this.playSound()} minimal={true} className=\"playButton\"><Icon icon=\"play\" iconSize={18} intent={this.state.filepath !== '' ? \"success\" : \"none\"} /></Button>\r\n        </div>);\r\n    }\r\n\r\n    addSound() {\r\n        //tells electron to open a file dialog for audio files\r\n\r\n        let args = {\r\n            id: this.state.name\r\n        }\r\n\r\n        ipcRenderer.send('add', args);\r\n\r\n        //sets the component's filepath\r\n        ipcRenderer.on('filepath' + this.state.name, (event, filepath) => {\r\n            this.setState({ filepath: filepath });\r\n            this.state.fileAddHandler({ id: this.state.name, filepath: filepath });\r\n        });\r\n    }\r\n\r\n    playSound() {\r\n        //only play the audio file if one has been added\r\n        if (this.state.filepath !== undefined && this.state.filepath.localeCompare('') !== 0) {\r\n            const player = new Audio(this.state.filepath);\r\n            player.play().catch(e => console.error(\"audio play failed with: \" + e));\r\n        }\r\n    }\r\n\r\n    updateFormData(ev) {\r\n        if (ev.target.type === \"number\") {\r\n            this.setState({ [ev.target.name]: Number(ev.target.value) });\r\n        } else {\r\n            this.setState({ [ev.target.name]: ev.target.value });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Sound;","import React, { Component } from 'react';\r\nimport Sound from './Sound.jsx';\r\nimport { Button, Collapse, Icon, Label } from \"@blueprintjs/core\";\r\n\r\nclass SoundGroup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let propSounds = this.props.sounds;\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            index: this.props.index,\r\n            binding: this.props.binding,\r\n            isOpen: true,\r\n            sounds: (propSounds !== undefined) ? propSounds : [],\r\n            fileAddHandler: this.props.fileAddHandler\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        //TODO: generate this later\r\n        return (\r\n            <div>\r\n                <div className=\"soundGroupHeader\">\r\n                    <Button onClick={() => this.toggleOpen()} minimal={true} className=\"chevron\">\r\n                        <Icon icon={this.state.isOpen && this.state.sounds.length > 0 ? \"chevron-down\" : \"chevron-right\"} iconSize={22} />\r\n                    </Button>\r\n                    <Label className=\"soundGroupName\">{this.state.name}</Label>\r\n                    <Button onClick={() => this.addSound()} minimal={true}><Icon icon=\"plus\" iconSize={22} /></Button>\r\n                </div>\r\n                <div>\r\n                    <Collapse isOpen={this.state.isOpen} keepChildrenMounted={true}> <div>\r\n                    </div>\r\n                        {\r\n                            Object.keys(this.state.sounds).filter((sound, index) => {\r\n                                return sound !== undefined && this.state.sounds[index] !== undefined\r\n                            }).map((sound, index) => {\r\n                                if (sound !== undefined && this.state.sounds[index] !== undefined) {\r\n                                    return <Sound name={this.state.index + \":\" + index} key={this.state.index + \":\" + index} index={index} fileAddHandler={this.props.fileAddHandler} filepath={this.state.sounds[index]} />\r\n                                }\r\n\r\n\r\n                            }\r\n\r\n                            )\r\n                        }</Collapse>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n\r\n    addSound() {\r\n\r\n        this.setState({ isOpen: true })\r\n\r\n        let sounds = this.state.sounds;\r\n\r\n        if (sounds.length !== undefined) {\r\n            sounds[sounds.length] = '';\r\n        } else {\r\n            sounds[Object.keys(sounds).length] = '';\r\n        }\r\n\r\n        this.setState({ sounds: sounds })\r\n\r\n    }\r\n\r\n    toggleOpen() {\r\n        this.setState({ isOpen: !this.state.isOpen })\r\n    }\r\n\r\n    updateFormData(ev) {\r\n        if (ev.target.type === \"number\") {\r\n            this.setState({ [ev.target.name]: Number(ev.target.value) });\r\n        } else {\r\n            this.setState({ [ev.target.name]: ev.target.value });\r\n        }\r\n    }\r\n}\r\n\r\nexport default SoundGroup;","import React, { Component } from 'react';\r\nimport SoundGroup from './SoundGroup.jsx'\r\nimport { Button } from \"@blueprintjs/core\";\r\nimport \"normalize.css/normalize.css\"\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"../css/main.css\"\r\nconst { ipcRenderer } = window.require('electron');\r\n\r\n\r\nconst cleanState = () => ({\r\n    name: \"Group Name\",\r\n    soundGroups: []\r\n});\r\n\r\n\r\nclass SoundBoard extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let propSoundGroups = this.props.soundGroups;\r\n\r\n\r\n        this.state = {\r\n            name: \"Test Name\",\r\n            soundGroups: (propSoundGroups !== undefined) ? propSoundGroups : [],\r\n        }\r\n\r\n        ipcRenderer.on('binding', (event, binding) => {\r\n            console.log(binding)\r\n            this.playSoundGroup(binding);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        this.soundboard = (\r\n            <div>\r\n\r\n                <Button id=\"addGroupButton\" className=\"bp3-button bp3-icon-add bp3-intent-primary\" onClick={() => this.addSoundGroup()} >Add Group</Button>;\r\n\r\n                <div id=\"soundGroups\">\r\n                    {\r\n                        this.state.soundGroups.map((group, index) => <SoundGroup key={index} index={index.toString()} name={group.name} binding={group.binding} sounds={group.sounds} fileAddHandler={this.addFileHander.bind(this)} />)\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <Button className=\"bp3-button bp3-icon-download bp3-intent-secondary\" onClick={() => this.import()} >Import</Button>\r\n                    <Button className=\"bp3-button bp3-icon-upload bp3-intent-secondary\" onClick={() => this.export()} >Export</Button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n\r\n        return this.soundboard;\r\n    }\r\n\r\n    addSoundGroup() {\r\n        this.setState({ soundGroups: [...this.state.soundGroups, { name: \"Group \" + this.state.soundGroups.length, binding: this.state.soundGroups.length.toString() }] });\r\n    }\r\n\r\n    playSoundGroup(binding) {\r\n        for (let i = 0; i < this.state.soundGroups.length; i++) {\r\n            let group = this.state.soundGroups[i];\r\n            if (group.binding.localeCompare(binding) === 0) {\r\n                let sounds = group.sounds;\r\n                let random = Math.round(Math.random() * Object.keys(sounds).length);\r\n                this.playSound(sounds[random]);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    import() {\r\n\r\n        this.setState(cleanState);\r\n\r\n        ipcRenderer.send('import');\r\n\r\n        ipcRenderer.on('load', (event, file) => {\r\n            this.setState({ name: file.name })\r\n            this.setState({ soundGroups: file.soundGroups })\r\n        });\r\n    }\r\n\r\n    export() {\r\n        //TODO: use toast here to send message on success/failure\r\n        let storedData = JSON.stringify(this.state)\r\n        ipcRenderer.send('export', storedData);\r\n    }\r\n\r\n    addFileHander(fileInput) {\r\n\r\n        let groupFile = fileInput.id.split(':');\r\n        let groupId = groupFile[0];\r\n        let fileId = groupFile[1];\r\n        let filepath = fileInput.filepath;\r\n\r\n        //Gets the list of Sounds from the appropriate group\r\n        let groups = this.state.soundGroups;\r\n        let group = groups[groupId];\r\n        let groupSounds = { ...group.sounds }\r\n\r\n        //Set the filepath of the new sound\r\n        groupSounds[fileId] = filepath\r\n        group.sounds = groupSounds\r\n        groups[groupId] = group;\r\n        this.setState({ soundGroups: groups });\r\n    }\r\n\r\n    updateFormData(ev) {\r\n        if (ev.target.type === \"number\") {\r\n            this.setState({ [ev.target.name]: Number(ev.target.value) });\r\n        } else {\r\n            this.setState({ [ev.target.name]: ev.target.value });\r\n        }\r\n    }\r\n\r\n    playSound(filepath) {\r\n        if (filepath !== undefined && filepath.localeCompare('') !== 0) {\r\n            const player = new Audio(filepath);\r\n            player.play().catch(e => console.error(\"audio play failed with: \" + e));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default SoundBoard;","import React from \"react\";\r\nimport SoundBoard from \"./components/Soundboard.jsx\";\r\n\r\nfunction App() {\r\n  return <SoundBoard />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}